import unittest
from config import SERVER_ADDRESS
from getmac import get_mac_address as gma
from user_verification import UserVerification
import requests
from common_exceptions import DataException
from on_device_data_worker import JSONWorker


class UserVerificationTest(unittest.TestCase):
    def test_correct_user(self):
        # Initializing the session and data for request
        session = requests.Session()
        key = 'e16462c64dab04a81721ab58d21f8ce02151097f35e39600c8e41769af78be795e7b15b33d97f8adbfaf74672c74e50aea32071aeadea3cddf3cd1f319c5fac3152407c15a75ae083309ab09cb5f87ff297a3ddcd88593dac2981fb2519423dcb170df6c4992295507b7bd47adbcc1e525812f93a150db74d7126cdcbbaadf749574ea2b9dc0785d8fb137a40a6dcc31205e8948dd2a8b2350abc7cce3db946640054f7cbbedd13ef8efb3ec76b5ad8b030074a41e6f9a34acdefc3be02b00fa59d9b58da6dae3d9aec59183ce0df03c240a49c7ed00e3d91c5693f6377fbadcf64088b9ad58a267e475318a388b96e01c07cc892163d4238fe22e7058dfe27fdd073eee87f90c0ea5cb30c1c0963abfd3fc57c4349f059416e0049591bef07793ee4bf460d48e351209d6f10db9ec9fee8a902eb2071fe9212231ab8742a2b3441350a2ebacc9304644a300a88d2923c059c94e33f25f824c3c1b3a3c934a662750643c6c003a0c7b8240bca6d1711d5d5aa2f350aaa68335219b2d5f2b4fb7ca19d2e8c1f7da8f69ddedf5bf74ed3790e8a924b1a8a2f70c3053fe6dabf272aa0eadad1d6c0c5e9c2c3f6a46077c95b778b577361dd402a7b6733d42d233e0cf6c3e737e383e067bc4a33d1059b8588983a53d09947878f91fb9c95d4e08073a2dc0a211e946233adbafc12bd36bc6806b78e3da1e31545f4a39c4428d91b010494c0d755bc48ec4a20113579b726a2dd1fefcd1a33121db69782f9394c7f64db7c9c03732b582a5b9288094e48adcde30f7902b412155a16480590a7da895ffeefe6379c58ee7eab2c3af39067d978986cf3404bfc53835b9b764db17691693f01b0cc461be332cc59f8cb28778ec773089d5b7f0954773845aebd95f86a0bfa6c0a4f91d92f8d4fd0d7a17801703664027f54e027bc1b88e6a895b54635e15db688c89c671cbdd4b0f091eb373924d4acca9329d817f6d61f4bf00279595315eecf06b0d9aa59449c2aa990d0370faf75da62fd608a93131d480be43f00f5ef4dac1c029256532d4009d1af4cfe037097e473a11f000f90c40fb6f6d954c20c74946856f4c05802dc98a50b623f7ff216362455d9a88485896284bf283277db789597e0993b662a339ef37a257fbd0237162d66d0cecb4e0cfb3a33b8a7b60975948d787ce92c619755059b727b544434e3b395d616e5bf2be74a0e606c1143cbc9033246b97f7c87bede086fd0b9eb896d2e57a1a995730bff6b8f6ca4016cdfccd9a08ad0312654e7335775be55819883e73d4751faf07a2b8cfd87ed6066cd3dc76c8c4fa5e89407436ebed71ecd28f4f2542bd15554c193dfa66e8355984a5398da707d4e1824a841614aaee43e32c2ba789cd63bd3ddd80a07af9de8f0cea923a54d90b2f42dcae6636d310e5892b37fa8ad986a2bf047d174d86a6'
        product_id = '31c19c30-4de3-4c22-ace4-fb4af61f8375'

        data = {
            "data": {
                "username": "sample",
                "password": "adminadmin",
                "key": key,
                "mac": str(gma()),
                "product_id": product_id
            }
        }

        # Testing
        user_verifyer = UserVerification('{}{}'.format(SERVER_ADDRESS, '/api/auth/keys/'))
        response = user_verifyer.verify(data=data, session=session)
        self.assertTrue(response)

    def test_other_users_key(self):
        # Initializing the session and data for request
        session = requests.Session()
        key = '89def0e7f667a7c3738d6611525df8519fd68a7de9e0e76c1e031dc1e96471f8dfab773f2e91ea678fbda2c81241c7de5b76d4d793e1cb8444fd689458ef546fd1709c75e8b45d5f0be7b62aad1d587f7e7d4cabea598665e4dda56e453ddfab1d38ab8136dfdbafcc36bd1a4eb9d0c99c2d6ccd0f5507e20e30b68a3d806b325201c75aed02e043b3631ba01aeea312d6ddbb8965dd395393c75d96b9e25e5edd63ca0a6ff39a1be3e3991df6ec7db513f020a186840d606cc6e182dbe0110047c0b6c08b60940e6805b140f3445455b2f64fe0a6d2725d3801c58e921cdd8f35e6f12d5af998ecf25e526456f8aa0cb9a5c89fb31e478cb101172a04210b6edc4ee0da3f19091a4e71a5ca9ed2d4f106648a345ea484418548cffa2327df65f1803d6ef2ecfbfa05aeef11d959527d362051518cead63e5ec88955b8c14b7bb0c931f0595995165d37b8a566e592abb58be9b550d73f95fe249beb8f3b7fc5afe6302bc2220034f13379248cb9b8c9f4ceeac36c0ab54e34a9eb64129813804fd4c8087d928824f302b13a1bc7ea52ce3a7c578ef822cbc5686127c6b110ac0a16ae8230a6393f9d67fc0ca462709ab301a391a95b399a4942e9911614d5d552c1a5615e332010a01a5c3bcfde6372d0d1e695caa084f0e42321400e66c0c0ab87961a82e8549be9238de77ed0f2deba93f1ab9af11c7ea71292dbf221ab9a18fc95fe470bcb43c4d1ecb923b4c36b9794512a3b9169556d9ab3b69d75c0c6b935dc6b5ea8a0c4966e9c6cb0366691aaad43b6995142c2a2733badb33a5c728a3a21cc743bb419faea6477f9d0221a01ec83b70f4d760dc3a5761ccafd696aaa9123b6e002b22c3a2afe6736745f0547acd42b7d8162c62e7f016c53afbfffb8714204c97815e5d9a24198f9758f2afca72ba3a91f9422aa4afe8128b2a20b397d1dfb5f4fd59227bece7c1e9f39f672fdba22454f635ce5be0dad6ac83a3a2abe942420ec0eba521d5b3781d069e94f821b59a66455ab586e808310a3ce0a1e3f2bc7c74f9138ae548e02c1bd1fc9be371708e0868be4d7d1fbc23530526f08cae55fe5fbb0912c70b5e42e448ad091212f6a792b3632564aa0c9479d78444c5e6651f4d74394fdbdbfc59e1b0aaf211ed40c5cc119e0515fd3928b33c6c545b4e3a8a94cf0b07d32b55170cd8a58862f3848847900c9dffc952f27d9f9672fd2111741c0b8b5ab0732dd50cd36a740f44ab00219bfb02f37cc8c736300c5ad7f015d7c51e1756367ca620b08004f89f3bf5e56625452c5c161839c4c3eee3d7c68068b3c4eb1f264ee13e10c3c69da95179a873728eee3f57ef006c4505fcbe9f9c4927619102c3c8ec89582ed248cc0db3fe143a5c05a835328440f799da227ecf8192e3c5fa3fd5b9f72c41cf108c3fe724940c2776ab04b134224c1e0'
        product_id = '31c19c30-4de3-4c22-ace4-fb4af61f8375'

        data = {
            "data": {
                "username": "sample",
                "password": "adminadmin",
                "key": key,
                "mac": str(gma()),
                "product_id": product_id
            }
        }

        # Testing
        user_verifyer = UserVerification('{}{}'.format(SERVER_ADDRESS, '/api/auth/keys/'))
        with self.assertRaises(DataException):
            user_verifyer.verify(data=data, session=session)

    def test_non_existing_key(self):
        # Initializing the session and data for request
        session = requests.Session()
        key = 'efe3g2c64dab04a81721ab58d21f8ce02151097f35e39600c8e41769af78be795e7b15b33d97f8adbfaf74672c74e50aea32071aeadea3cddf3cd1f319c5fac3152407c15a75ae083309ab09cb5f87ff297a3ddcd88593dac2981fb2519423dcb170df6c4992295507b7bd47adbcc1e525812f93a150db74d7126cdcbbaadf749574ea2b9dc0785d8fb137a40a6dcc31205e8948dd2a8b2350abc7cce3db946640054f7cbbedd13ef8efb3ec76b5ad8b030074a41e6f9a34acdefc3be02b00fa59d9b58da6dae3d9aec59183ce0df03c240a49c7ed00e3d91c5693f6377fbadcf64088b9ad58a267e475318a388b96e01c07cc892163d4238fe22e7058dfe27fdd073eee87f90c0ea5cb30c1c0963abfd3fc57c4349f059416e0049591bef07793ee4bf460d48e351209d6f10db9ec9fee8a902eb2071fe9212231ab8742a2b3441350a2ebacc9304644a300a88d2923c059c94e33f25f824c3c1b3a3c934a662750643c6c003a0c7b8240bca6d1711d5d5aa2f350aaa68335219b2d5f2b4fb7ca19d2e8c1f7da8f69ddedf5bf74ed3790e8a924b1a8a2f70c3053fe6dabf272aa0eadad1d6c0c5e9c2c3f6a46077c95b778b577361dd402a7b6733d42d233e0cf6c3e737e383e067bc4a33d1059b8588983a53d09947878f91fb9c95d4e08073a2dc0a211e946233adbafc12bd36bc6806b78e3da1e31545f4a39c4428d91b010494c0d755bc48ec4a20113579b726a2dd1fefcd1a33121db69782f9394c7f64db7c9c03732b582a5b9288094e48adcde30f7902b412155a16480590a7da895ffeefe6379c58ee7eab2c3af39067d978986cf3404bfc53835b9b764db17691693f01b0cc461be332cc59f8cb28778ec773089d5b7f0954773845aebd95f86a0bfa6c0a4f91d92f8d4fd0d7a17801703664027f54e027bc1b88e6a895b54635e15db688c89c671cbdd4b0f091eb373924d4acca9329d817f6d61f4bf00279595315eecf06b0d9aa59449c2aa990d0370faf75da62fd608a93131d480be43f00f5ef4dac1c029256532d4009d1af4cfe037097e473a11f000f90c40fb6f6d954c20c74946856f4c05802dc98a50b623f7ff216362455d9a88485896284bf283277db789597e0993b662a339ef37a257fbd0237162d66d0cecb4e0cfb3a33b8a7b60975948d787ce92c619755059b727b544434e3b395d616e5bf2be74a0e606c1143cbc9033246b97f7c87bede086fd0b9eb896d2e57a1a995730bff6b8f6ca4016cdfccd9a08ad0312654e7335775be55819883e73d4751faf07a2b8cfd87ed6066cd3dc76c8c4fa5e89407436ebed71ecd28f4f2542bd15554c193dfa66e8355984a5398da707d4e1824a841614aaee43e32c2ba789cd63bd3ddd80a07af9de8f0cea923a54d90b2f42dcae6636d310e5892b37fa8ad986a2bf047d174d86a6'
        product_id = '31c19c30-4de3-4c22-ace4-fb4af61f8375'

        data = {
            "data": {
                "username": "sample",
                "password": "adminadmin",
                "key": key,
                "mac": str(gma()),
                "product_id": product_id
            }
        }

        # Testing
        user_verifyer = UserVerification('{}{}'.format(SERVER_ADDRESS, '/api/auth/keys/'))
        with self.assertRaises(DataException):
            user_verifyer.verify(data=data, session=session)

    def test_invalid_login(self):
        # Initializing the session and data for request
        session = requests.Session()
        key = 'e16462c64dab04a81721ab58d21f8ce02151097f35e39600c8e41769af78be795e7b15b33d97f8adbfaf74672c74e50aea32071aeadea3cddf3cd1f319c5fac3152407c15a75ae083309ab09cb5f87ff297a3ddcd88593dac2981fb2519423dcb170df6c4992295507b7bd47adbcc1e525812f93a150db74d7126cdcbbaadf749574ea2b9dc0785d8fb137a40a6dcc31205e8948dd2a8b2350abc7cce3db946640054f7cbbedd13ef8efb3ec76b5ad8b030074a41e6f9a34acdefc3be02b00fa59d9b58da6dae3d9aec59183ce0df03c240a49c7ed00e3d91c5693f6377fbadcf64088b9ad58a267e475318a388b96e01c07cc892163d4238fe22e7058dfe27fdd073eee87f90c0ea5cb30c1c0963abfd3fc57c4349f059416e0049591bef07793ee4bf460d48e351209d6f10db9ec9fee8a902eb2071fe9212231ab8742a2b3441350a2ebacc9304644a300a88d2923c059c94e33f25f824c3c1b3a3c934a662750643c6c003a0c7b8240bca6d1711d5d5aa2f350aaa68335219b2d5f2b4fb7ca19d2e8c1f7da8f69ddedf5bf74ed3790e8a924b1a8a2f70c3053fe6dabf272aa0eadad1d6c0c5e9c2c3f6a46077c95b778b577361dd402a7b6733d42d233e0cf6c3e737e383e067bc4a33d1059b8588983a53d09947878f91fb9c95d4e08073a2dc0a211e946233adbafc12bd36bc6806b78e3da1e31545f4a39c4428d91b010494c0d755bc48ec4a20113579b726a2dd1fefcd1a33121db69782f9394c7f64db7c9c03732b582a5b9288094e48adcde30f7902b412155a16480590a7da895ffeefe6379c58ee7eab2c3af39067d978986cf3404bfc53835b9b764db17691693f01b0cc461be332cc59f8cb28778ec773089d5b7f0954773845aebd95f86a0bfa6c0a4f91d92f8d4fd0d7a17801703664027f54e027bc1b88e6a895b54635e15db688c89c671cbdd4b0f091eb373924d4acca9329d817f6d61f4bf00279595315eecf06b0d9aa59449c2aa990d0370faf75da62fd608a93131d480be43f00f5ef4dac1c029256532d4009d1af4cfe037097e473a11f000f90c40fb6f6d954c20c74946856f4c05802dc98a50b623f7ff216362455d9a88485896284bf283277db789597e0993b662a339ef37a257fbd0237162d66d0cecb4e0cfb3a33b8a7b60975948d787ce92c619755059b727b544434e3b395d616e5bf2be74a0e606c1143cbc9033246b97f7c87bede086fd0b9eb896d2e57a1a995730bff6b8f6ca4016cdfccd9a08ad0312654e7335775be55819883e73d4751faf07a2b8cfd87ed6066cd3dc76c8c4fa5e89407436ebed71ecd28f4f2542bd15554c193dfa66e8355984a5398da707d4e1824a841614aaee43e32c2ba789cd63bd3ddd80a07af9de8f0cea923a54d90b2f42dcae6636d310e5892b37fa8ad986a2bf047d174d86a6'
        product_id = '31c19c30-4de3-4c22-ace4-fb4af61f8375'

        data = {
            "data": {
                "username": "samplefwe3rfe",
                "password": "adminadmin",
                "key": key,
                "mac": str(gma()),
                "product_id": product_id
            }
        }

        # Testing
        user_verifyer = UserVerification('{}{}'.format(SERVER_ADDRESS, '/api/auth/keys/'))
        with self.assertRaises(DataException):
            user_verifyer.verify(data=data, session=session)

    def test_invalid_password(self):
        # Initializing the session and data for request
        session = requests.Session()
        key = 'e16462c64dab04a81721ab58d21f8ce02151097f35e39600c8e41769af78be795e7b15b33d97f8adbfaf74672c74e50aea32071aeadea3cddf3cd1f319c5fac3152407c15a75ae083309ab09cb5f87ff297a3ddcd88593dac2981fb2519423dcb170df6c4992295507b7bd47adbcc1e525812f93a150db74d7126cdcbbaadf749574ea2b9dc0785d8fb137a40a6dcc31205e8948dd2a8b2350abc7cce3db946640054f7cbbedd13ef8efb3ec76b5ad8b030074a41e6f9a34acdefc3be02b00fa59d9b58da6dae3d9aec59183ce0df03c240a49c7ed00e3d91c5693f6377fbadcf64088b9ad58a267e475318a388b96e01c07cc892163d4238fe22e7058dfe27fdd073eee87f90c0ea5cb30c1c0963abfd3fc57c4349f059416e0049591bef07793ee4bf460d48e351209d6f10db9ec9fee8a902eb2071fe9212231ab8742a2b3441350a2ebacc9304644a300a88d2923c059c94e33f25f824c3c1b3a3c934a662750643c6c003a0c7b8240bca6d1711d5d5aa2f350aaa68335219b2d5f2b4fb7ca19d2e8c1f7da8f69ddedf5bf74ed3790e8a924b1a8a2f70c3053fe6dabf272aa0eadad1d6c0c5e9c2c3f6a46077c95b778b577361dd402a7b6733d42d233e0cf6c3e737e383e067bc4a33d1059b8588983a53d09947878f91fb9c95d4e08073a2dc0a211e946233adbafc12bd36bc6806b78e3da1e31545f4a39c4428d91b010494c0d755bc48ec4a20113579b726a2dd1fefcd1a33121db69782f9394c7f64db7c9c03732b582a5b9288094e48adcde30f7902b412155a16480590a7da895ffeefe6379c58ee7eab2c3af39067d978986cf3404bfc53835b9b764db17691693f01b0cc461be332cc59f8cb28778ec773089d5b7f0954773845aebd95f86a0bfa6c0a4f91d92f8d4fd0d7a17801703664027f54e027bc1b88e6a895b54635e15db688c89c671cbdd4b0f091eb373924d4acca9329d817f6d61f4bf00279595315eecf06b0d9aa59449c2aa990d0370faf75da62fd608a93131d480be43f00f5ef4dac1c029256532d4009d1af4cfe037097e473a11f000f90c40fb6f6d954c20c74946856f4c05802dc98a50b623f7ff216362455d9a88485896284bf283277db789597e0993b662a339ef37a257fbd0237162d66d0cecb4e0cfb3a33b8a7b60975948d787ce92c619755059b727b544434e3b395d616e5bf2be74a0e606c1143cbc9033246b97f7c87bede086fd0b9eb896d2e57a1a995730bff6b8f6ca4016cdfccd9a08ad0312654e7335775be55819883e73d4751faf07a2b8cfd87ed6066cd3dc76c8c4fa5e89407436ebed71ecd28f4f2542bd15554c193dfa66e8355984a5398da707d4e1824a841614aaee43e32c2ba789cd63bd3ddd80a07af9de8f0cea923a54d90b2f42dcae6636d310e5892b37fa8ad986a2bf047d174d86a6'
        product_id = '31c19c30-4de3-4c22-ace4-fb4af61f8375'

        data = {
            "data": {
                "username": "sample",
                "password": "admiewfewecadmin",
                "key": key,
                "mac": str(gma()),
                "product_id": product_id
            }
        }

        # Testing
        user_verifyer = UserVerification('{}{}'.format(SERVER_ADDRESS, '/api/auth/keys/'))
        with self.assertRaises(DataException):
            user_verifyer.verify(data=data, session=session)

    def test_verify_from_json(self):
        # Initializing the session and data for request
        session = requests.Session()
        key = 'e16462c64dab04a81721ab58d21f8ce02151097f35e39600c8e41769af78be795e7b15b33d97f8adbfaf74672c74e50aea32071aeadea3cddf3cd1f319c5fac3152407c15a75ae083309ab09cb5f87ff297a3ddcd88593dac2981fb2519423dcb170df6c4992295507b7bd47adbcc1e525812f93a150db74d7126cdcbbaadf749574ea2b9dc0785d8fb137a40a6dcc31205e8948dd2a8b2350abc7cce3db946640054f7cbbedd13ef8efb3ec76b5ad8b030074a41e6f9a34acdefc3be02b00fa59d9b58da6dae3d9aec59183ce0df03c240a49c7ed00e3d91c5693f6377fbadcf64088b9ad58a267e475318a388b96e01c07cc892163d4238fe22e7058dfe27fdd073eee87f90c0ea5cb30c1c0963abfd3fc57c4349f059416e0049591bef07793ee4bf460d48e351209d6f10db9ec9fee8a902eb2071fe9212231ab8742a2b3441350a2ebacc9304644a300a88d2923c059c94e33f25f824c3c1b3a3c934a662750643c6c003a0c7b8240bca6d1711d5d5aa2f350aaa68335219b2d5f2b4fb7ca19d2e8c1f7da8f69ddedf5bf74ed3790e8a924b1a8a2f70c3053fe6dabf272aa0eadad1d6c0c5e9c2c3f6a46077c95b778b577361dd402a7b6733d42d233e0cf6c3e737e383e067bc4a33d1059b8588983a53d09947878f91fb9c95d4e08073a2dc0a211e946233adbafc12bd36bc6806b78e3da1e31545f4a39c4428d91b010494c0d755bc48ec4a20113579b726a2dd1fefcd1a33121db69782f9394c7f64db7c9c03732b582a5b9288094e48adcde30f7902b412155a16480590a7da895ffeefe6379c58ee7eab2c3af39067d978986cf3404bfc53835b9b764db17691693f01b0cc461be332cc59f8cb28778ec773089d5b7f0954773845aebd95f86a0bfa6c0a4f91d92f8d4fd0d7a17801703664027f54e027bc1b88e6a895b54635e15db688c89c671cbdd4b0f091eb373924d4acca9329d817f6d61f4bf00279595315eecf06b0d9aa59449c2aa990d0370faf75da62fd608a93131d480be43f00f5ef4dac1c029256532d4009d1af4cfe037097e473a11f000f90c40fb6f6d954c20c74946856f4c05802dc98a50b623f7ff216362455d9a88485896284bf283277db789597e0993b662a339ef37a257fbd0237162d66d0cecb4e0cfb3a33b8a7b60975948d787ce92c619755059b727b544434e3b395d616e5bf2be74a0e606c1143cbc9033246b97f7c87bede086fd0b9eb896d2e57a1a995730bff6b8f6ca4016cdfccd9a08ad0312654e7335775be55819883e73d4751faf07a2b8cfd87ed6066cd3dc76c8c4fa5e89407436ebed71ecd28f4f2542bd15554c193dfa66e8355984a5398da707d4e1824a841614aaee43e32c2ba789cd63bd3ddd80a07af9de8f0cea923a54d90b2f42dcae6636d310e5892b37fa8ad986a2bf047d174d86a6'
        product_id = '31c19c30-4de3-4c22-ace4-fb4af61f8375'

        data = {
            "data": {
                "username": "sample",
                "password": "adminadmin",
                "key": key,
                "mac": str(gma()),
                "product_id": product_id
            }
        }
        json_worker = JSONWorker()
        json_worker.set_the_data_to_json(data)
        del data

        data = json_worker.get_the_data_from_json()
        # Testing
        user_verifyer = UserVerification()
        response, _ = user_verifyer.verify(data=data, session=session)
        self.assertTrue(response)
